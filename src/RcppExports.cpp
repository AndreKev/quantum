// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// csend
NumericVector csend(CharacterVector message, CharacterVector address, CharacterVector PORT);
RcppExport SEXP _quantum_csend(SEXP messageSEXP, SEXP addressSEXP, SEXP PORTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type message(messageSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type address(addressSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type PORT(PORTSEXP);
    rcpp_result_gen = Rcpp::wrap(csend(message, address, PORT));
    return rcpp_result_gen;
END_RCPP
}
// cwait
CharacterVector cwait(CharacterVector R_PORT);
RcppExport SEXP _quantum_cwait(SEXP R_PORTSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterVector >::type R_PORT(R_PORTSEXP);
    rcpp_result_gen = Rcpp::wrap(cwait(R_PORT));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quantum_csend", (DL_FUNC) &_quantum_csend, 3},
    {"_quantum_cwait", (DL_FUNC) &_quantum_cwait, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_quantum(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
